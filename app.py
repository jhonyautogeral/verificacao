import streamlit as st
import re
from datetime import datetime

def validar_numero_cartao(numero):
    """Algoritmo de Luhn para validar n√∫mero do cart√£o"""
    # Remove espa√ßos e h√≠fens
    numero = re.sub(r'[^0-9]', '', numero)
    
    # Verifica se tem apenas n√∫meros e comprimento v√°lido
    if not numero.isdigit() or len(numero) < 13 or len(numero) > 19:
        return False
    
    # Algoritmo de Luhn
    total = 0
    reverse_digits = numero[::-1]
    
    for i, digit in enumerate(reverse_digits):
        n = int(digit)
        if i % 2 == 1:  # Posi√ß√µes √≠mpares (da direita para esquerda)
            n *= 2
            if n > 9:
                n = (n // 10) + (n % 10)
        total += n
    
    return total % 10 == 0

def validar_validade(validade):
    """Valida se a data est√° no formato MM/AA e n√£o expirou"""
    try:
        mes, ano = validade.split('/')
        if len(mes) != 2 or len(ano) != 2:
            return False
        
        mes = int(mes)
        ano = int('20' + ano)  # Converte AA para 20AA
        
        if mes < 1 or mes > 12:
            return False
        
        # Verifica se n√£o expirou
        hoje = datetime.now()
        if ano < hoje.year or (ano == hoje.year and mes < hoje.month):
            return False
        
        return True
    except:
        return False

def validar_cvv(cvv):
    """Valida se o CVV tem 3 ou 4 d√≠gitos"""
    return cvv.isdigit() and len(cvv) in [3, 4]

def salvar_dados_cartao(numero, validade, cvv):
    """Salva os dados do cart√£o em um arquivo txt"""
    with open('cartao_validado.txt', 'w') as arquivo:
        arquivo.write(f"N√∫mero do Cart√£o: {numero}\n")
        arquivo.write(f"Validade: {validade}\n")
        arquivo.write(f"CVV: {cvv}\n")
        arquivo.write(f"Data de Verifica√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")

# Interface Streamlit
st.title("üîí Verificador de Cart√£o de Cr√©dito")

# Mensagem de conscientiza√ß√£o
st.warning("""
**‚ö†Ô∏è IMPORTANTE - CONSCIENTIZA√á√ÉO SOBRE SEGURAN√áA FINANCEIRA**

A verifica√ß√£o de cart√µes de cr√©dito √© fundamental para:
- Prevenir fraudes e transa√ß√µes n√£o autorizadas
- Proteger seus dados pessoais e financeiros
- Evitar preju√≠zos financeiros
- Manter sua seguran√ßa digital

**NUNCA** compartilhe os dados do seu cart√£o com terceiros ou sites duvidosos.
Este sistema √© apenas para fins educacionais.
""")

st.markdown("---")

# Campos de entrada
st.subheader("üìù Digite os dados do cart√£o:")

numero_cartao = st.text_input(
    "N√∫mero do Cart√£o de Cr√©dito:", 
    placeholder="1234 5678 9012 3456",
    help="Digite apenas n√∫meros (espa√ßos ser√£o removidos automaticamente)"
)

validade = st.text_input(
    "Validade do Cart√£o (MM/AA):", 
    placeholder="12/25",
    help="Formato: MM/AA (exemplo: 12/25)"
)

cvv = st.text_input(
    "C√≥digo de Seguran√ßa (CVV):", 
    placeholder="123",
    type="password",
    help="3 ou 4 d√≠gitos no verso do cart√£o"
)

# Bot√£o de verifica√ß√£o
if st.button("üîç Verificar Cart√£o de Cr√©dito", type="primary"):
    if numero_cartao and validade and cvv:
        # Valida√ß√µes
        numero_valido = validar_numero_cartao(numero_cartao)
        validade_valida = validar_validade(validade)
        cvv_valido = validar_cvv(cvv)
        
        if numero_valido and validade_valida and cvv_valido:
            st.success("‚úÖ **CART√ÉO V√ÅLIDO!** Todos os dados est√£o corretos.")
            
            # Salva os dados em arquivo
            try:
                salvar_dados_cartao(numero_cartao, validade, cvv)
                st.info("üìÑ Dados salvos no arquivo 'cartao_validado.txt'")
            except Exception as e:
                st.error(f"Erro ao salvar arquivo: {e}")
                
        else:
            st.error("‚ùå **CART√ÉO INV√ÅLIDO!**")
            
            # Mostra erros espec√≠ficos
            if not numero_valido:
                st.error("‚Ä¢ N√∫mero do cart√£o inv√°lido")
            if not validade_valida:
                st.error("‚Ä¢ Data de validade inv√°lida ou expirada")
            if not cvv_valido:
                st.error("‚Ä¢ CVV deve ter 3 ou 4 d√≠gitos")
    else:
        st.warning("‚ö†Ô∏è Por favor, preencha todos os campos!")

# Rodap√©
st.markdown("---")
st.caption("üîê Sistema educacional - Mantenha seus dados seguros!")